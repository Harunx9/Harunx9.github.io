<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Programming warfare - Inne</title><link href="https://harunx9.github.io/" rel="alternate"></link><link href="https://harunx9.github.io/feeds/inne.atom.xml" rel="self"></link><id>https://harunx9.github.io/</id><updated>2017-11-30T00:00:00+01:00</updated><entry><title>Jak stać się junior developerem - Tutorial cz. 2</title><link href="https://harunx9.github.io/jak-stac-sie-junior-developerem-tutorial-cz-2.html" rel="alternate"></link><published>2017-11-30T00:00:00+01:00</published><updated>2017-11-30T00:00:00+01:00</updated><author><name>Szymon Wanot</name></author><id>tag:harunx9.github.io,2017-11-30:/jak-stac-sie-junior-developerem-tutorial-cz-2.html</id><summary type="html">&lt;p&gt;Cześć, pod poprzednim artykułem pokazało się kilka komentarzy, które uświadomiły mi, że to co napisałem nie jest do końca kompletne i usystematyzowane. Dziś postaram się nieco uzupełnić poprzedni wpis dodając elementy, które były treścią komentarzy. Zacznijmy standardowo od aspektów związanych bezpośrednio z pracą programisty, tak bez wchodzenia w konkretną technologię …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cześć, pod poprzednim artykułem pokazało się kilka komentarzy, które uświadomiły mi, że to co napisałem nie jest do końca kompletne i usystematyzowane. Dziś postaram się nieco uzupełnić poprzedni wpis dodając elementy, które były treścią komentarzy. Zacznijmy standardowo od aspektów związanych bezpośrednio z pracą programisty, tak bez wchodzenia w konkretną technologię.&lt;/p&gt;
&lt;p&gt;Na pewno brakowało czegoś na temat rozwiązywania problemów. Jest to umiejętność niezbędna do pracy każdego programisty. Tylko jak te problemy rozwiązywać to zależy tak naprawdę od paradygmatu języka programowania. Poza walką .NET/Java czy Ruby/Python/PHP, mamy coś takiego co nazywa się paradygmatem programowania, gdzie wyróżniamy np. języki obiektowe, funkcyjne, itp. Itd.. Ten kto chce znajdzie wszystkie paradygmaty w Internecie. Dodatkowo każdy język może umożliwiać programowanie wieloparadygamtowe np. C# jest obiektowy, imperatywny, strukturalny i częściowo funkcyjny. Co dla nas jako dla programisty oznacza paradygmat. Właściwie jest on wszystkim w momencie rozbijania naszego zadania na mniejsze składowe . W programowaniu obiektowym jest duża szansa, że rozwiązując jakiś problem stworzymy kilka klas, które korzystając ze swoich funkcjonalności będą rozwiązywały nasz problem. W przypadku języka funkcyjnego to właśnie funkcje będą rozwiązaniem naszego problemu i może jeszcze jakieś struktury danych i tak dalej w przypadku innych paradygmatów. Tu z mojej strony taka dobra rada, żeby jak już nauczysz się jednego paradygmatu to zerknąć czasem gdzieś poza swoją strefę komfortu. Ja tak z mojej strony uczę się języka Rust, który nie jest obiektowy, a dodatkowo nie ma maszyny wirtualnej do zarządzania pamięcią. Moje pierwsze starcia pokazały mi, że nie jest tak prosto wyzbyć się nawyków z języka obiektowego, ale można i to daje również mi nowe możliwości w C#.&lt;/p&gt;
&lt;p&gt;Drugą rzeczą są narzędzia i chodzi mi tu o ich znajomość praktyczną, a nie tylko wpis na LinkedIn. Oznacza to, że nie klikamy po naszym IDE tylko chociaż umiem używać podstawowych skrótów klawiszowych. Dodatkowo dobrze jak umielibyśmy posługiwać się wspomnianym w komentarzach debuggerem przynajmniej w formie podstawowej. Co do testów to raczej  na początku nie zawracałbym sobie tym głowy, ale jak coś się będzie wiedziało to spoko. Jeszcze jedna rzecz, o której wspomniałem, ale powtórzę jeszcze raz to znajomość przynajmniej jednego systemu kontroli wersji. Tu polecam Git'a, ponieważ jest on chyba najbardziej popularnym narzędziem tego typu.&lt;/p&gt;
&lt;p&gt;Teraz przejdźmy do rzeczy nie związanych z ściśle z samym pisaniem kodu czy narzędziami. Zacznijmy od wyszukiwania rozwiązań. Często jest tak, że problem który mamy rozwiązać jest już rozwiązany i wystarczy skorzystać z pracy kogoś dostosowując tylko kod do naszego problemu. Tu przyda się umiejętność jak dla mnie trywialna, czyli korzystanie z wyszukiwarki Google. Tak może tu zadziwię niektóre osoby, ale programiści nawet Ci którzy w branży są już długo korzystają z Google do wyszukiwania rozwiązań, a nie piszą wszystkiego od zera. Tu dodatkowo warto szukać w języku angielskim, ponieważ w IT jest to taki język domyślny. Jak nie umiemy formułować swoich wypowiedzi  w języku Shakespeare'a to polecam Google translator. Sam tak na początku robiłem. Jeżeli chodzi o Internet nie można tu pominąć StackOverflow, czyli największego globalnego forum programistycznego. Można tam znaleźć rozwiązania właściwie na każdy nasz problem, więc pewnie długo nie będziecie musieli pisać tam żadnych postów, poza tym większość zapytań do Google będzie właśnie tam was kierować.   &lt;/p&gt;
&lt;p&gt;Co do języka angielskiego to polecam właśnie w tym języku czytać wszelkie materiały dotyczące programowania. Wiem sam tworzę treści w języku polskim i sam takie treści konsumuję, ale mimo to większość mojej obecnej wiedzy pochodzi ze źródeł anglojęzycznych, bo np. o takim OpenGL to nie ma za dużo na polskiej blogosferze programistycznej.  &lt;/p&gt;
&lt;p&gt;Dodatkowo powtórzę, że warto budować swoje portfolio, piszcie aplikacje nawet małe byle działające. Im więcej ich napiszecie  tym lepiej poukładane one będą i będziecie mieli większą siłę przebicia na rynku.&lt;/p&gt;
&lt;p&gt;Jest jedna rzecz którą polecę jeszcze na koniec. To coś co pozwoliło mi mocno pokonać krzywą nauki, a są to wystąpienia na Youtube. Można tam znaleźć masę konferencji i różnych innych wystąpień w języku angielski jak i polskim. Warto więc poszperać, ponieważ własne nagrania mają nawet grupy programistyczne. Ja z takich nagrań dowiedziałem się o Akka.NET, której później używałem w projekcie. Warto więc zamiast oglądać śmieszne koty poświęcić tą godzinę co jakiś czas na ciekawą prelekcję, która pozwoli nam zyskać ciekawą wiedzę.&lt;/p&gt;
&lt;p&gt;W komentarzach przewinął się jeszcze temat przygotowania do rozmowy kwalifikacyjnej. Tu będzie dość kontrowersyjnie, ponieważ ja uważam, że to bez sensu. Naszym przygotowaniem są projekty, które nauczyły nas programować. Jeżeli w nich czujemy się pewnie i znamy w miarę technologię, w której zamierzamy pracować to trzeba zmierzyć się z rozmową. Jeżeli się nie dostaniemy to zawsze można próbować znowu, a mamy czarno na białym czego nie umiemy i nad czym trzeba popracować, żeby zdobyć nową wiedzę. Nikt was nie będzie specjalnie przepytywał z nie wiadomo jakich wiadomości szczególnie jak to będzie wasza pierwsza praca. Ja sam tak robiłem i nadal tak robię tzn. na rozmowię idę z marszu, ponieważ nie ma sensu studiować miliona pytań kwalifikacyjnych, bo i tak jak nas zatrudnią to pracodawca dostanie walidacje naszych odpowiedzi w postaci naszej pracy. Jak na rozmowie odpowiedzieliśmy, bo wykuliśmy coś na pamięć, a nie umiemy tego zastosować to wyjdzie bardzo szybko, więc nie ma sensu tego robić.&lt;/p&gt;
&lt;p&gt;To chyba na tyle. Jak mi się jeszcze coś nasunie to pewnie powstanie kolejna część. Jak zawsze zapraszam do sekcji komentarzy, gdzie chętnie podyskutuje o tym co tu napisałem, jak i o waszych pomysłach.&lt;/p&gt;</content><category term="blog"></category><category term="inne"></category><category term="it"></category><category term="praca"></category></entry><entry><title>Jak stać się junior developerem - Tutorial</title><link href="https://harunx9.github.io/jak-stac-sie-junior-developerem-tutorial.html" rel="alternate"></link><published>2017-11-20T00:00:00+01:00</published><updated>2017-11-20T00:00:00+01:00</updated><author><name>Szymon Wanot</name></author><id>tag:harunx9.github.io,2017-11-20:/jak-stac-sie-junior-developerem-tutorial.html</id><summary type="html">&lt;p&gt;Cześć. Ostatnio nie mam zbyt wiele czasu pisać, ale jest jeden temat na który powinienem się wypowiedzieć. Kilku moich znajomych próbuje się przekwalifikować z jakieś innej dziedziny na programistę lub dostać prace w it, więc zadają mi pytania jak to zrobić. Jestem dość specyficzną osobą, to znaczy odnalazłem pasję w …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cześć. Ostatnio nie mam zbyt wiele czasu pisać, ale jest jeden temat na który powinienem się wypowiedzieć. Kilku moich znajomych próbuje się przekwalifikować z jakieś innej dziedziny na programistę lub dostać prace w it, więc zadają mi pytania jak to zrobić. Jestem dość specyficzną osobą, to znaczy odnalazłem pasję w programowaniu i poza pracą prowadzę tego oto bloga, rozwijam swój autorski silnik do gier oraz narzędzia do niego, więc poświęcam na swój rozwój sporo czasu i zdaje sobie sprawę, że nie każdy tak chce/może/jest w stanie. Zastrzegę na początku, że to co tu pisze to moje prywatne opinie i mogą się one różnić od tego co jest na rynku pracy w Twojej miejscowości. Będę sporo odwoływał się do wymagań na .NET developera, ponieważ taką technologią zajmuje się w pracy, choć postaram się to zminimalizować i jak najbardziej uogólnić.&lt;/p&gt;
&lt;h3&gt;Co trzeba umieć?&lt;/h3&gt;
&lt;p&gt;To jest punkt tak na prawdę najtrudniejszy, ponieważ rozbija się o technologię i w tym momencie powiem nieco co trzeba umieć jako taki początkujący .NET developer. Po pierwsze niezależne od technologii warto by znać:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;język w którym będziemy programować - wiem banalne i głupie, ale jak ktoś by chciał programować jako .NET/C# to miło żeby ogarniał elementy języka takie jak - Linq, delegaty, funkcje lambda, bo jest to jakiś wyróżnik C# względem innych języków i te elementy na co dzień się stosuje w normalnej pracy.&lt;/li&gt;
&lt;li&gt;programowanie obiektowe - teraz widzę to święte oburzenie, ale nie znajomość języka to nie to samo co programowanie obiektowe, bo można znać C# i pisać klasy po 5k linijek nie korzystać z kompozycji, polimorfimzu i jakichkolwiek dobrych praktyk separacji kodu w klasy. Mimo, że nie mam bardzo długiego stażu, to przeszedłem kilka projektów i cześć z nich nie miała nic wspólnego z programowaniem obiektowych mimo, że były klasy.&lt;/li&gt;
&lt;li&gt;wzorce projektowe - to jest nieco dla mnie kontrowersyjne, bo sam ich na pamięć nie znam. Bardziej jest to na takiej zasadzie, że mam jakieś zadanie i nie mam na niego pomysły to sięgam do wzorców i często tam znajduję jakieś pomysły na implementacje&lt;/li&gt;
&lt;li&gt;SOLID - są to ogóle zasady dobrego programowania sprowadzające się do dobrych praktyk. Jeżeli znasz SOLID to jesteś w stanie za ich pomocą zaimplementować wzorce projektowe nie znając ich.&lt;/li&gt;
&lt;li&gt;system kontroli wersji  GIT/SVN - jest to narzędzie niezwiązane z samym programowaniem. Pomaga ono we współpracy wielu developerów. Generalnie działa ono tak, że jest jakieś jedno centralne repozytorium, gdzie przechowuje się kod i można tam za ich pomocą ten kod dodawać. Git i SVN są najbardziej popularne generalnie polecam zacząć od Git'a, ale SVN też można jeszcze gdzie nie gdzie spotkać.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To jest moim zdaniem takie minimum, które należałoby umieć. Co do wzorców to tak jak napisałem może nie tyle żeby na pamięć je znać tylko bardziej tak orientować się, że są i że jak mamy problem z jakąś implementacją to mogą nam pomóc.&lt;/p&gt;
&lt;p&gt;Poza tymi rzeczami teraz taki Junior .NET Developer powinien liznąć co nieco ekosystemu, czyli wiedzieć coś o NuGET, Visual Studio itp. Kolejną sprawą są frameworki. Ja miałem akurat takie szczęście, że na uczelni przeszliśmy właściwie przez wszystko odnoście .NET, czyli aplikacje konsolowe, okienkowe i webowe. Każdy język ma jakieś swoje frameworki, które trzeba znać. Tu oczywiście też nie na pamięć, ale jak aplikujemy do aplikacji webowych to takie MVC i WebAPI trzeba znać.&lt;/p&gt;
&lt;h3&gt;Czy studia pomogą?&lt;/h3&gt;
&lt;p&gt;Tu będzie mocno kontrowersyjnie, ale moim zdaniem studnia niczego sensownego was nie nauczą. Sam nieco żałuje, że nie zrezygnowałem po pierwszym roku studiów,ponieważ programowania uczyłem się głównie sam w domu po pracy. Później zwolniłem się i siedziałem przez około 6 miesięcy ucząc się po 8 godzin dziennie. Myślę, że regularna codzienna nauka a nie studia pozwoliły mi wcześnie znaleźć pracę. Studia owszem są fajne, ponieważ dają możliwość znalezienia ludzi, dzięki którym uczymy się szybciej, ale sam proces nauki to jednak i tak nasz wysiłek, którego nikt za nas nie wykona. &lt;/p&gt;
&lt;h3&gt;To co w takim razie zrobić ?&lt;/h3&gt;
&lt;p&gt;Teraz odpowiem na to znienawidzonym "to zależy". Jeżeli masz do 30 lub koło 30 lat i nie masz zobowiązań to idź na te studia. Tak jak napisałem powyżej nikt Ci tam wiedzy do głowy nie włoży, ale jak sam będziesz pracował to masz szanse poznać ludzi dzięki którym szybciej się rozwiniesz. Jeżeli nie masz czasu na studia to polecam najpierw jakiś kurs pokroju SoloLearn, TreeHouse, Code School. Część jest darmowa część jest płatana. Takie kursy dobrze uczą składni języka przez kolejne przykłady. Potem można sobie znaleźć jakieś ćwiczenia z danego języka i próbować je robić.&lt;/p&gt;
&lt;p&gt;Alternatywą do dalszych ćwiczeń jest wymyślenie sobie jakiegoś projektu i próba jego implementacji. Pewnie zanim coś powstanie to wyrzucicie kod milion razy do kosza, ale dzięki temu nauczycie się najlepiej. Ważnym jest też żeby to co robicie było widoczne. I w tym miejscu polecam takie coś jak GgitHub. Jest to portal gdzie za darmo możecie sobie hostować wasze repozytoria gitowe. Generalnie należy wyróżnić się wśród kandydatów na stanowisko pracy. Jeżeli pokażemy własny projekt, pasję z jaką go realizujemy, to że się interesujemy tym programowaniem. Mamy dzięki temu większe szanse na dostanie się do pracy niż statystyczny magister informatyki nawet jeżeli ma 5 i wyróżnienie na dyplomie.&lt;/p&gt;
&lt;p&gt;I teraz tak na zakończenie najważniejsza porada już na rozmowę kwalifikacyjną. Programista, który będzie Cię rekrutował to też człowiek i on też nie wie wszystkiego. Generalnie ważne jest to żeby nie wyidealizować sobie ludzi pracujących w tym zawodzie. Pozwoli to na większy luz podczas rozmowy co przełoży się na lepszy odbiór twojej osoby przez rekrutrów. Warto też pamiętać o tym, że my też nie musimy wiedzieć wszystkiego. Każdy ma jakąś specjalizacje, używał takich czy innych bibliotek, więc należy wyluzować, bo jak używałeś Autofac to Structure Map czy Castle Windsor też będzie używał bez problemu.&lt;/p&gt;
&lt;p&gt;Podsumowując co należy zrobić to pisać kod po trzykroć, ponieważ programowanie to nauka przez powtarzanie. Im więcej piszemy tym lepiej piszemy. Po drugie warto znaleźć swoje zainteresowanie w programowaniu, ponieważ jak się czymś interesujemy to łatwiej przychodzi nam nauka. Ja odnalazłem swoje zainteresowanie w gamedevie i mimo, że na co dzień nie pracuje przy grach, to wykorzystuje masę zdobytej wiedzy w codziennej pracy. To czy iść na studia jest sprawą indywidualną. Sam znam kilku programistów, którzy studiów nie ukończyli i w niczym im to nie przeszkadza. &lt;/p&gt;
&lt;p&gt;To chyba na tyle. Jeżeli macie jakieś pytania czy uwagi to jak zawsze zapraszam do sekcji komentarzy.&lt;/p&gt;</content><category term="blog"></category><category term="inne"></category><category term="it"></category><category term="praca"></category></entry><entry><title>Hello World rok później</title><link href="https://harunx9.github.io/hello-world-rok-pozniej.html" rel="alternate"></link><published>2017-10-18T00:00:00+02:00</published><updated>2017-10-18T00:00:00+02:00</updated><author><name>Szymon Wanot</name></author><id>tag:harunx9.github.io,2017-10-18:/hello-world-rok-pozniej.html</id><summary type="html">&lt;p&gt;Cześć.  16 października 2016 czyli ponad rok temu temu wystartowałem z blogiem, ponieważ chciałem robić coś poza siedzeniem w piwnicy i klepaniem kolejnych linijek kodu. Zauważyłem, że dodatkowo taki blog może być świetnym miejscem na wymianę idei, czy rozwijanie swojego kodowania.
 Co udało się przez ten rok osiągnąć:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;48 wpisów …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Cześć.  16 października 2016 czyli ponad rok temu temu wystartowałem z blogiem, ponieważ chciałem robić coś poza siedzeniem w piwnicy i klepaniem kolejnych linijek kodu. Zauważyłem, że dodatkowo taki blog może być świetnym miejscem na wymianę idei, czy rozwijanie swojego kodowania.
 Co udało się przez ten rok osiągnąć:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;48 wpisów&lt;/li&gt;
&lt;li&gt;4 529 odsłon na dzień 16.10.2017&lt;/li&gt;
&lt;li&gt;Udział w DSP 2017&lt;/li&gt;
&lt;li&gt;Odświeżenie C++ i 2DXngine&lt;/li&gt;
&lt;li&gt;Itd. Itp. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To tak w skrócie, a teraz nieco dokładniej.&lt;/p&gt;
&lt;h2&gt;DSP 2017&lt;/h2&gt;
&lt;p&gt;Powiem tak, DSP świetnie zgrało się z moim rozmyślaniem nad tym czy bloga nie zostawić w cholerę, ponieważ nie miałem motywacji żeby ciągnąć temat dalej, podobnie było z nauką C++. Było to związane z różnymi czynnikami, ponieważ początek roku miałem nieco bardziej intensywny. Nie miałem pomysłu co robić dalej a, że znam C# to nie chciałem za bardzo opuszczać swojej strefy komfortu i przypominać sobie jak działają wskaźniki. Jak już dowiedziałem się, że DSP stratuje to walczyłem chwile z myślami czy w ogóle dam radę, ale ostatecznie się zdecydowałem i nie żałuje.
Obecnie C++ używam dość sprawnie, co prawda ze względu na wydajność nie stosuje wszystkich rzeczy w C++11, ale częściowo udało mi się parę elementów nowych standardów dodać do silnika. Cel został więc osiągnięty a dodatkowo w DSP pisałem blogi 2 razy w tygodniu co pozwoliło mi zakwalifikować się do 184 blogów w finale, co traktuje jako sukces. Nie udało się dojść do ścisłego finału, ale co tam i tak jak na początek blogowania jest ok. Teraz przejdźmy do wyniku Daj Się Poznać, czyli 2DXngine.&lt;/p&gt;
&lt;h2&gt;2DXngine&lt;/h2&gt;
&lt;p&gt;Silnik, który jest wynikiem mojego startu w DSP 2017. Obecnie wychodzę z tego co sobie założyłem jako alfę do bety, czyli można próbować pisać gry, ale nie gwarantuje, że wszystko będzie działało. Sam silnik jak i narzędzia do niego napisane w .NET CORE jest Open Source. Posiada integracje do edytora poziomów Tiled, co pozwala na tworzenie  różnych gier 2D.
Na razie sama budowa silnika jest nieco nieestetyczna, ale to zmieni się w nadchodzącym czasie
o samym silniku był już artykuł, więc nie chce się powtarzać i zapraszam &lt;a href="https://harunx9.github.io/2dxngine-update-wersja-02x-alpha.html#2dxngine-update-wersja-02x-alpha"&gt;TUTAJ&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Co dajej&lt;/h2&gt;
&lt;p&gt;Generalnie zadowolony jestem z kierunku w jakim rozwija się blog, a co ważniejsze, że po roku chce mi się jeszcze go prowadzić. W najbliższym czasie nie zamierzam zmieniać zawartości, czyli dalej będzie o tworzeniu gier za pomocą C++/C# oraz o tym co robię w 2DXngine. Jedyne nad czym się zastanawiam to pisanie części postów po angielsku i po polsku, ale to jak już to od przyszłego roku. W zanadrzu mam jeszcze pomysł na serię o Akka .NET, ponieważ wymyśliłem zastosowanie dal niej około enginowe, ale to jeszcze zobaczymy. &lt;/p&gt;
&lt;p&gt;Na koniec chciałem podziękować wszystkim czytającym, komentującym. Mam nadzieję, że w przyszłym roku będzie bardziej tematycznie, ponieważ w tym nieco poskakałem po tematach, ale lubię pisać o tym co aktualnie robię. &lt;/p&gt;</content><category term="blog"></category><category term="inne"></category></entry><entry><title>.NET dev na detoksie, czyli Visual Studio 2017 bez Resharpera</title><link href="https://harunx9.github.io/net-dev-na-detoksie-czyli-visual-studio-2017-bez-resharpera.html" rel="alternate"></link><published>2017-09-09T00:00:00+02:00</published><updated>2017-09-09T00:00:00+02:00</updated><author><name>Szymon Wanot</name></author><id>tag:harunx9.github.io,2017-09-09:/net-dev-na-detoksie-czyli-visual-studio-2017-bez-resharpera.html</id><summary type="html">&lt;p&gt;Cześć. Dziś będzie trochę o narzędziach pracy. Jak wiadomo przynajmniej do niedawana, jako .NET developerzy mieliśmy jedno IDE, czyli &lt;a href="https://www.visualstudio.com/pl/vs/"&gt;Visual Studio&lt;/a&gt; ewentualnie jak ktoś chciał mógł używać &lt;a href="http://www.monodevelop.com/"&gt;MonoDevelop&lt;/a&gt;. Obecnie po ostatnim otwarciu się Microsoftu na świat Open Source  pojawiało się masę edytorów wspierających C# i IntelliSense za pomocą &lt;a href="http://www.omnisharp.net/"&gt;OmniSharp&lt;/a&gt;. Dodatkowo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cześć. Dziś będzie trochę o narzędziach pracy. Jak wiadomo przynajmniej do niedawana, jako .NET developerzy mieliśmy jedno IDE, czyli &lt;a href="https://www.visualstudio.com/pl/vs/"&gt;Visual Studio&lt;/a&gt; ewentualnie jak ktoś chciał mógł używać &lt;a href="http://www.monodevelop.com/"&gt;MonoDevelop&lt;/a&gt;. Obecnie po ostatnim otwarciu się Microsoftu na świat Open Source  pojawiało się masę edytorów wspierających C# i IntelliSense za pomocą &lt;a href="http://www.omnisharp.net/"&gt;OmniSharp&lt;/a&gt;. Dodatkowo kawałek .NET'owego tortu chce uszczknąć JetBrains za pomocą swojego IDE &lt;a href="https://www.jetbrains.com/rider/"&gt;Rider&lt;/a&gt;. Jak widać w przeciągu 2-3 lat ilość narzędzi wzrosła i nie jesteśmy już ograniczeni do samego Visual Studio. Jednak nie o tym ma być ten artykuł. Samo VS jest narzędziem dość ciężkim, posiada masę  funkcji, jednak paru istotnych rzeczy zawsze w nim brakowało - tą lukę zawsze uzupełniał &lt;a href="https://www.jetbrains.com/resharper/"&gt;Resharper&lt;/a&gt; od wspomnianego już JetBrains. Co prawda Visual Studio zawsze gdzieś tam próbowało zaimplementować nowe funkcje, ale szło to bardzo ślamazarnie, więc pozycja R# wydawała się niezagrożona. Ostatnio jednak mocno się w temacie ruszyło oraz zmieniło, szczególnie po ostaniem update Visual Studio 2017 do wersji 15.3 i magicznie VS zyskało masę nowych funkcji. Zaznaczam, że nie wiem jak było w poprzednich wersjach VS 2017, bo niedawno się przesiadłem. Przejdźmy więc przez zmiany, które zauważyłem:&lt;/p&gt;
&lt;h3&gt;IntelliSense&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Intelisese" src="/images/vs2017/Intellisense.gif"&gt;&lt;/p&gt;
&lt;p&gt;Jak widać doszły na dole nowe filtry dla okienka IntelliSense można wyszukiwać w namespace, klasach, snippetach itp. Całkiem fajna zmiana co prawda w C# średnio ją wykorzystuje, ale w C++ jakoś tak częściej. Z tego co zauważyłem cały system lepiej przewiduję to co będę wpisywał. Z tego co brakuje to nie ma wyszukiwania w typach, których nie mamy w usingach. R# takie coś potrafi i szkoda, że nie ma tego samo Visual Studio.&lt;/p&gt;
&lt;h3&gt;Generate Constructor&lt;/h3&gt;
&lt;p&gt;&lt;img alt="ctorf" src="/images/vs2017/Ctorf.gif"&gt;&lt;/p&gt;
&lt;p&gt;Element, którego brakowało w Visual Studio. Pamiętam, że jak pisałem system w Akka.Net to musiałem pisać masę klas readonly, które miały inicjalizacje przez konstruktor i bardzo tej funkcjonalności brakowało (a R# nie miałem). 
Brawo Microsoft !!!&lt;/p&gt;
&lt;h3&gt;Extract to file&lt;/h3&gt;
&lt;p&gt;&lt;img alt="extract" src="/images/vs2017/extractToFile.gif"&gt;&lt;/p&gt;
&lt;p&gt;Z tego co pamiętam to było to jakoś dostępne w VS 2015, ale nie działało tak dobrze jak teraz. Jest to mega użyteczne narzędzie, ponieważ często dla jakiegoś POC piszemy klasy w jednym pliku i dzięki temu można to szybko podzielić.&lt;/p&gt;
&lt;h3&gt;Wyszukiwanie w projekcie&lt;/h3&gt;
&lt;p&gt;&lt;img alt="ctrlT" src="/images/vs2017/ctrlT.gif"&gt;&lt;/p&gt;
&lt;p&gt;Wszyscy znający R# znają skrót 'Ctrl+T', który pozwala na wyszukiwanie po właściwie wszystkim w projekcie tzn. pliki, property, typy itp. Z tego co pamiętam VS miało taką biedniejszą wersje tego pod 'Ctrl+,'. Obecnie funkcjonalność ta została bardzo rozwinięta no i skrót pokrywa się z tym z R#.&lt;/p&gt;
&lt;h3&gt;Refactoringi&lt;/h3&gt;
&lt;p&gt;Generalnie z tego co widziałem pojawiło się dużo więcej akcji kontekstowych powalających na różne refactoringi kodu. Dodatkowo zmienił się skrót na Quick Actions z 'Ctrl+.' na znany z R# 'Alt+Enter'. Polecam dodatkowo zainstalować &lt;a href="http://vsrefactoringessentials.com/"&gt;RefactoringEssentials&lt;/a&gt;, ponieważ dodają one nowe rzeczy, których nie ma w gołym VS.&lt;/p&gt;
&lt;p&gt;Mimo tych nowych rzeczy, które w dużym stopniu usprawniają prace z Visual Studio bez R# to jednak paru rzeczy brakuje. Zobaczymy co przyniosą kolejne aktualizacje Visual Studio, bo obecny kierunek bardzo mi się podoba. A wy co zauważyliście z nowości w VS 2017?&lt;/p&gt;</content><category term="blog"></category><category term=".net"></category><category term="programming"></category><category term="c#"></category><category term="visualstudio"></category><category term="refactoring"></category><category term="resharper"></category></entry><entry><title>DSP 2017: Podsumowanie</title><link href="https://harunx9.github.io/dsp-2017-podsumowanie.html" rel="alternate"></link><published>2017-06-08T19:00:00+02:00</published><updated>2017-06-08T19:00:00+02:00</updated><author><name>Szymon Wanot</name></author><id>tag:harunx9.github.io,2017-06-08:/dsp-2017-podsumowanie.html</id><summary type="html">&lt;p&gt;Cześć, wiem, że trochę już po nie w czasie zamieszczam podsumowanie konkursu Daj Się Poznać 2017, ale ważne, że jest. Po pierwsze chciałbym podziękować wszystkim odwiedzjącym i komentującym. Mam nadzieję, że również po konkursie będziecie odwiedzać mojego bloga. Ztego miejsca zapraszam do dyskusji, ponieważ tylko tak można wymienić się wiedzą …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cześć, wiem, że trochę już po nie w czasie zamieszczam podsumowanie konkursu Daj Się Poznać 2017, ale ważne, że jest. Po pierwsze chciałbym podziękować wszystkim odwiedzjącym i komentującym. Mam nadzieję, że również po konkursie będziecie odwiedzać mojego bloga. Ztego miejsca zapraszam do dyskusji, ponieważ tylko tak można wymienić się wiedzą i poszerzyć horyzonty. Drugą sprawą jest realizacja projektu. Jak to zawsze u mnie bywa okazało się, że projekt był trudniejszy, niż na początku zakładałem.
Mimo to udało się co nie co zrealizować. 
W czasie tych 3 miesięcy udało mi się zrealizować:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;renderowanie 2D,  &lt;/li&gt;
&lt;li&gt;wczytywanie assetów, &lt;/li&gt;
&lt;li&gt;component model, &lt;/li&gt;
&lt;li&gt;informacje o typie instancji obiektu, &lt;/li&gt;
&lt;li&gt;system scen,&lt;/li&gt;
&lt;li&gt;input z klawiatury i myszy,&lt;/li&gt;
&lt;li&gt;service locator,&lt;/li&gt;
&lt;li&gt;eventy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nie jest to wszystko, tylko jakieś większe rzeczy. Z nich wszystkich renderowanie 2D i implementacja informacji o typie, zajęły mi najwięcej czasu. Teraz co dalej. Moja praca nad 2DXngine będzie kontynuowana, ale w nieco innej formie. Silnik dalej będzie dostępny na Githubie, ale chciałbym żeby był on tzw.  battle tested. W tym celu rozpocznę implementację gry na tym silniku. Nie chciałbym mówić o tym projekcie za dużo, ponieważ jest on na razie dopiero w fazie konkretyzowania moich pomysłów i tego jak to robić. Przy moich obecnych zobowiązaniach najwcześniej będę mógł coś pokazać za jakieś 6 do 8 miesięcy. Podczas implementacji gry będę rozwijał silnik o elementy, które można wykorzystać uniwersalnie. Do końca tego miesiąca postaram nieco uporządkować kod w repozytorium i podokańczać to co już zacząłem robić.&lt;/p&gt;
&lt;p&gt;W lipcu planuje rozpocząć implementacje, więc jak coś dodam do silnika, to będę to też commitował na repozytorium githubowe. Poza tym wszystkim planuje nieco zrefactorować kod, tak aby korzystał z feature'ów C++11, czyli smart pointerów, itp. Mam nadzieję, że nie odbije się to negatywnie na wydajności. Kolejnym krokiem będzie pomyślenie jak wykorzystać wielowątkowość. 
I tu mam pytanie. Jak ktoś ma jakieś ciekawe materiały na temat wielowątkowości w C++ i jak to zutylizować w silniku do gier komputerowych to proszę o rady. linki, tytuły książek. Każdy materiał z chęcią przyswoję i wykorzystam w mojej implementacji. &lt;/p&gt;
&lt;p&gt;Na zakończenie chciałem jeszcze raz wszystkim podziękować za wsparcie i pomoc. Mam nadzieję że implementacja gry nie wpłynie zbytnio na to w jakich odstępach będą pojawiać się posty. &lt;/p&gt;</content><category term="blog"></category><category term="inne"></category></entry><entry><title>Moja Internetowa baza wiedzy</title><link href="https://harunx9.github.io/moja-internetowa-baza-wiedzy.html" rel="alternate"></link><published>2017-04-26T20:10:00+02:00</published><updated>2017-04-26T20:10:00+02:00</updated><author><name>Szymon Wanot</name></author><id>tag:harunx9.github.io,2017-04-26:/moja-internetowa-baza-wiedzy.html</id><summary type="html">&lt;p&gt;Cześć. Jak pisałem w którymś z poprzednich postów, można nauczyć się programować samemu z Internetu. Podobnie jest, jeśli chodzi o rozwój programisty. Ja przez te parę lat nauki i rozwoju znalazłem kilka fajnych miejsc w Internecie lub dostosowałem odwiedzane strony tak, aby służyły mi jako baza wiedzy o programowaniu. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com"&gt;YouTube …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Cześć. Jak pisałem w którymś z poprzednich postów, można nauczyć się programować samemu z Internetu. Podobnie jest, jeśli chodzi o rozwój programisty. Ja przez te parę lat nauki i rozwoju znalazłem kilka fajnych miejsc w Internecie lub dostosowałem odwiedzane strony tak, aby służyły mi jako baza wiedzy o programowaniu. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com"&gt;YouTube&lt;/a&gt; - jestem słuchowcem (nie lubię czytać, ale za to uwielbiam słuchać). Jak coś usłyszę i dodatkowo zobaczę to zapamiętam właściwie od razu. Stąd YouTube jest jednym z głównych źródeł informacji dla mnie. Kiedyś zrobię może jakieś top kanałów o tematyce programistycznej lub top video, które zmieniły moje podejście do programowania. W każdym razie polecam ten serwis, ponieważ znajdziecie tam masę przystępnych materiałów z każdej technologii.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://dotnetomaniak.pl"&gt;Dotnetomaniak&lt;/a&gt; - jeżeli ktoś jeszcze nie zna to powinien jak najszybciej poznać ten agregator blogów o technologii .NET. Wiadomo, że nie będzie to miejsce obowiązkowe dla wszystkich, ale dla osób które tak jak ja zawodowo pracują z technologiami Microsoftu już jak najbardziej. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com"&gt;StackOverflow&lt;/a&gt; - masz problem z zadaniem w pracy. Nie wiesz jak coś zrobić w swoim języku programowania StackOverflow jest dla Ciebie. Jeżeli jakimś cudem nie znałeś jeszcze tego serwisu to od razu zacznij go używać. StackOverflow jest największym światowym forum o tematyce programowania. Generalnie jakiego byś nie miał problemu to powinieneś znaleźć tam rozwiązanie.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; - może ja należę do jakieś dziwnej grupy programistów, ale bardzo często i bardzo dużo wiedzy wyciągam z czytania kodu na GitHubie. Jest tam masa bibliotek napisanych w różnych językach programowania, więc każdy znajdzie coś dla siebie.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://zeef.com"&gt;Zeef&lt;/a&gt; - jest to dość ciekawy serwis bazujący na kartach użytkowników. Jest tam sporo informacji o różnych ciekawych rzeczach w tym te o programowaniu. Ja sam znalazłem sporo informacji o programowaniu gier komputerowych.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://zeef.com/"&gt;Facebook&lt;/a&gt; i &lt;a href="https://twitter.com"&gt;Twitter&lt;/a&gt; - na obu tych serwisach istnieje masa ludzi, fanpage'ów, grup publikujących treści o tematyce programistycznej. Informacji jest ogrom, więc jest z czego wybierać.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To chyba na tyle jeżeli chodzi o informacje ogólne. W temacie gier komputerowych korzystam jeszcze z Gamasutry i GDCValut, ale są to serwisy dotyczące game developmentu. Piszcie z czego wy korzystacie do poszerzania waszej wiedzy programistycznej i do następnego postu.&lt;/p&gt;</content><category term="DSP2017"></category><category term="Nauka"></category></entry><entry><title>Alternatywne ścieżki rozwoju programisty</title><link href="https://harunx9.github.io/alternatywne-sciezki-rozwoju-programisty.html" rel="alternate"></link><published>2017-04-03T17:40:00+02:00</published><updated>2017-04-03T17:40:00+02:00</updated><author><name>Szymon Wanot</name></author><id>tag:harunx9.github.io,2017-04-03:/alternatywne-sciezki-rozwoju-programisty.html</id><summary type="html">&lt;p&gt;Cześć. Dziś opowiem nieco o mojej przygodzie z tworzeniem gier oraz o tym dlaczego taką a nie inną obrałem drogę swojego rozwoju programistycznego. &lt;/p&gt;
&lt;p&gt;Na początku chciałem napisać o tym dlaczego mnie to zainteresowało. Po pierwsze sam chce się rozwijać, ale jako, że przez 8 godzin dziennie jestem web developerem  - programowanie …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cześć. Dziś opowiem nieco o mojej przygodzie z tworzeniem gier oraz o tym dlaczego taką a nie inną obrałem drogę swojego rozwoju programistycznego. &lt;/p&gt;
&lt;p&gt;Na początku chciałem napisać o tym dlaczego mnie to zainteresowało. Po pierwsze sam chce się rozwijać, ale jako, że przez 8 godzin dziennie jestem web developerem  - programowanie własnej web aplikacji po godzinach było by dla mnie bardziej meczące niż rozwijające. Na początku oczywiście uczyłem się nowych bibliotek, frameworków, ale po pewnym czasie stwierdziłem, że mam to codziennie w pracy i tak wszystkie te rzeczy idą dość szybko do przodu, więc tak na prawdę musiał bym co miesiąc poznać nową bibliotekę front-endową, a co rok nowe MVC. Dodatkowo nie mam gwarancji, że jej kiedykolwiek użyję, bo jeżeli projekt nad którym pracuję ma Angulara w wersji 1.+ to raczej nikt nie będzie tego przepisywał, żeby tylko wersja była najnowsza. Podobnie sprawa wygląda, jeżeli chodzi o biblioteki .NET, ponieważ aktualizacja może kosztować wiele refactoringów, jeżeli z wersji na wersje jakiś lib szybko się rozwija.
Z wyżej wymienionych powodów doszedłem do wniosku, że dużo lepiej będzie postawić na własny pisany bez pośpiechu projekt gry komputerowej, gdzie będę uczył się architektury, wzorców projektowych i prowadził to wszystko zgodnie ze sztuką, testując i refakturując kod kiedy uznam, że dane rozwiązanie było nietrafione. Dodatkowo, jeżeli stwierdzę, że ten projekt nie jest już do rozwoju ze względu na błędnie podjęte decyzje, mogę go porzucić w cholerę i zacząć pisać wszystko od zera, ponieważ nie ma nade mną klienta, który płaci za moje godziny. Inną korzyścią było to, że jak uda mi się coś skończyć, to zawsze mogę to spróbować sprzedać, co zasili mój domowy budżet.&lt;/p&gt;
&lt;p&gt;Od momentu podjęcia tej decyzji minęło około 4 lata przez które napisałem parę prototypów i popróbowałem kilku języków programowania. Nie stałem się jakąś gwiazda Indie Game Devu, ale mimo to dało mi to pewne wymierne korzyści. &lt;/p&gt;
&lt;p&gt;Po pierwsze nauczyłem się programować. Jeśli ktoś gdzieś tam mnie śledzi na mediach społecznościowych wie, że jestem absolwentem po socjologii i informatykę studiować dopiero nieco później. Spowodowało to, że w pierwszym roku musiałem przypomnieć sobie matematykę, fizykę, inne przedmioty ścisłe oraz nauczyć się w miarę programować, aby zdać i nie wylecieć z uczelni zaraz po pierwszym semestrze. W tym momencie pisanie prostych gierek okazało się zbawienne dlatego, że łącza one w sobie wszystkie rzeczy, które musiałem sobie przyswoić, a przy okazji miałem przy tym trochę zabawy. Oczywiście musiałem też uczyć się normlanie, ale mimo wszystko takie eksperymenty pozwoliły mi nieco szybciej opanować pewne rzeczy. &lt;/p&gt;
&lt;p&gt;Po drugie gry dały mi możliwość znalezienia pracy. Większość studentów na 2 lub 3 roku biega za zaliczeniami i poprawkami. Ja dzięki temu, że mocno przysiadłem nie miałem takich problemów. W wolnym czasie, którego miałem sporo udało mi się za to skończyć małą gierkę "Drop" na Androida. Miałem pierwszy własny skończony produkt. Nie był on piękny, ani za specjalnie grywalny, ale był. Dawało mi to możliwości na pójście na parę rozmów kwalifikacyjnych oraz to, że z końcem drugiego roku studiów dostałem swoją pierwszą pracę w programowaniu.&lt;/p&gt;
&lt;p&gt;Po trzecie ciągle uczę się nowych wzorców, algorytmów czy podejścia do architektury oprogramowania. Programowanie webowe rządzi się oczywiście nieco innymi prawami od gier komputerowych. W innych miejscach jest nacisk na optymalizacje, występują inne problemy. Mimo to na pewnym poziomie abstrakcji można wykorzystać pewne doświadczenia w obu tych światach mimo tego, że są one tak od siebie różne. &lt;/p&gt;
&lt;p&gt;Dla jasności, nie odrzucam w ogóle rozwoju w programowaniu webowym, ponieważ uczę się Akka.NET czy Nancy, mimo to gry dają mi poczucie pewnej wolności twórczej, dlatego z nich nie rezygnuję. Polecam taką drogę każdemu kto ma choć trochę pasji twórczej w sobie. Obecnie gry dotykają praktycznie każdego tematu, więc każdy może spróbować wrazić w nich samego siebie.&lt;/p&gt;</content><category term="DSP2017"></category><category term="Nauka"></category></entry><entry><title>Co dalej</title><link href="https://harunx9.github.io/co-dalej.html" rel="alternate"></link><published>2017-02-18T00:00:00+01:00</published><updated>2017-02-18T00:00:00+01:00</updated><author><name>Szymon Wanot</name></author><id>tag:harunx9.github.io,2017-02-18:/co-dalej.html</id><summary type="html">&lt;p&gt;Cześć, 
Wiem, że dawno nie było żadnych postów. Musiałem nieco przemyśleć to czym chce się dalej na blogu zajmować.
Z moich przemyśleń wynikają następujące decyzje. 
Po pierwsze chciałbym tworzyć wpisy w znacznej części poświęcone tworzeniu gier komputerowych.
Co do Akka.NET i C++ to postaram się ją w miarę możliwości …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cześć, 
Wiem, że dawno nie było żadnych postów. Musiałem nieco przemyśleć to czym chce się dalej na blogu zajmować.
Z moich przemyśleń wynikają następujące decyzje. 
Po pierwsze chciałbym tworzyć wpisy w znacznej części poświęcone tworzeniu gier komputerowych.
Co do Akka.NET i C++ to postaram się ją w miarę możliwości dokończyć, ale zmiana kierunku będzie bardziej widoczna. Musiałem podjąć takie kroki,
ponieważ nie byłem zadowolony z tego co do tej pory publikowałem. Co jakiś czas postaram się napisać to czy tamto na temat web developmentu, ale tylko i
wyłącznie jak będę miał temat, który mnie personalnie zainteresował.
Drugą sprawą jest  tegoroczna edycja konkursu  "Daj się poznać" organizowana przez Macieja Aniserowicza. Zostawiam link dla zainteresowanych -&amp;gt; &lt;a href="http://devstyle.pl/daj-sie-poznac/"&gt;TU&lt;/a&gt;. W
dużym skrócie myślałem, aby podjąć rękawice i spróbować zawalczyć (przy okazji "zmusić się" do odświeżenia C++). Co do projektu,
który miałbym realizować to mam kilka pomysłów:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Silnik 2D do tworzenia gier komputerowych C/C++ lub Rust&lt;/li&gt;
&lt;li&gt;Tool do pakowania SpriteSheet'ów C#&lt;/li&gt;
&lt;li&gt;Tool do edycji plansz 2D C#&lt;/li&gt;
&lt;li&gt;Tool do animacji szkieletowej C#&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wyboru dokonam końcem miesiąca o czym napisze z dokładnym opisem zakresu funkcjonalnego. Nie będę ukrywał, że najbardziej interesuje mnie pierwszy temat, ale musze
przemyśleć czy zakres mnie nie przerośnie. To tyle do końca tego miesiąca powinny pojawić się jeszcze jakieś posty, ale jeszcze nie wiem z jaką częstotliwością. &lt;/p&gt;</content><category term="blog"></category><category term="inne"></category></entry><entry><title>3.2.1 start</title><link href="https://harunx9.github.io/321-start.html" rel="alternate"></link><published>2016-10-16T00:00:00+02:00</published><updated>2016-10-16T00:00:00+02:00</updated><author><name>Szymon Wanot</name></author><id>tag:harunx9.github.io,2016-10-16:/321-start.html</id><summary type="html">&lt;p&gt;Cześć, &lt;/p&gt;
&lt;p&gt;Po dość długim czasie zastanawiania się czy inicjatywa w postaci kolejnego bloga technologicznego ma sens, postanowiłem jednak wystartować. &lt;/p&gt;
&lt;p&gt;W miarę moich możliwości czasowych, postaram się jak najczęściej dodawać posty.
Tematy, które będę poruszał w niniejszym blogu w dużej mierze będą dotyczyć technologii .NET/C# oraz C/C++ w kontekście …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cześć, &lt;/p&gt;
&lt;p&gt;Po dość długim czasie zastanawiania się czy inicjatywa w postaci kolejnego bloga technologicznego ma sens, postanowiłem jednak wystartować. &lt;/p&gt;
&lt;p&gt;W miarę moich możliwości czasowych, postaram się jak najczęściej dodawać posty.
Tematy, które będę poruszał w niniejszym blogu w dużej mierze będą dotyczyć technologii .NET/C# oraz C/C++ w kontekście tworzenia gier komputerowych.&lt;/p&gt;
&lt;p&gt;Możliwe, że w późniejszym czasie pojawi się seria wpisów na temat Unreal Engine 4. 
Chciałbym również zamieścić artykuł na temat aplikacji webowych, ale głównie od strony architektury oraz dobrych praktyk.&lt;/p&gt;
&lt;p&gt;Pozdrawiam oraz życzę przyjemnej lektury.&lt;/p&gt;</content><category term="blog"></category><category term="inne"></category></entry></feed>