<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Programming warfare - Inne, tools</title><link href="http://localhost:8000/" rel="alternate"></link><link href="http://localhost:8000/feeds/inne-tools.atom.xml" rel="self"></link><id>http://localhost:8000/</id><updated>2017-09-25T07:00:00+02:00</updated><entry><title>AppVeyor darmowe CI dla projektów Open Source</title><link href="http://localhost:8000/appveynor-darmowe-ci-dla-projektow-open-source.html" rel="alternate"></link><published>2017-09-25T07:00:00+02:00</published><updated>2017-09-25T07:00:00+02:00</updated><author><name>Szymon Wanot</name></author><id>tag:localhost,2017-09-25:/appveynor-darmowe-ci-dla-projektow-open-source.html</id><summary type="html">&lt;p&gt;Cześć. Jakiś czas temu natchnęło mnie i postanowiłem ogarnąć coś, żeby 2DXnegine budował się na serwerze Continous Integration. Dla niezaznajomionych z tematem Continous Integration to taki twór, który po każdym commicie będzie pobierał do siebie nasze źródła, kompilował je i odpalał testy - po tym wszystkim możemy gdzieś naszą zbudowaną aplikacje …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cześć. Jakiś czas temu natchnęło mnie i postanowiłem ogarnąć coś, żeby 2DXnegine budował się na serwerze Continous Integration. Dla niezaznajomionych z tematem Continous Integration to taki twór, który po każdym commicie będzie pobierał do siebie nasze źródła, kompilował je i odpalał testy - po tym wszystkim możemy gdzieś naszą zbudowaną aplikacje wystawić i robić jeszcze inne cuda, o których jeszcze nie pomyślałem. Na rynku istnieje parę usług CI dla projektów open source. Przy wyborze kierowałem się wsparciem dla MSBuild, ponieważ przez moje lenistwo nie zmieniłem jeszcze MSBuild'a na coś bardziej niezależnego od Visual Studio. To ograniczenie wykluczyło sporo serwisów, ale okazało się, że istnieje  darmowa usługa dla projektów open source wspierająca MSBuild, a jest to &lt;a href="https://www.appveyor.com/"&gt;AppVeyor&lt;/a&gt;. Jest to system oparty na windowsach, więc nadaje się rónież świetnie dla projetów .net'owych o czym też będzie w tym artykule. Zacznijmy od konfiguracji AppVeyor dla projektu C++. Na początku dodajemy na Dashboardzie serwisu nowy projekt z naszych repozytoriów githubowych. Jak projekt się utworzy to przechodzimy do zakładki settings i rozpoczynamy konfiguracje.
W zakładce General konfigurujemy format numeru build'a oraz branch z jakiego chcemy robić build:&lt;/p&gt;
&lt;p&gt;&lt;img alt src="/images/ci/BasicConfig.png"&gt;&lt;/p&gt;
&lt;p&gt;Następnie w zakładce Environments konfigurujemy Visual Studio z którego chcemy buildować solucje oraz ewentulanie skrypty, kóre mają się odpalić porzed buildem. W moim przypadku musiałem dodać klonowanie submodułów git.&lt;/p&gt;
&lt;p&gt;&lt;img alt src="/images/ci/BuildEnv.png"&gt;&lt;/p&gt;
&lt;p&gt;Aby uruchomić testy należy ze skryptu odpalić exe, które je zawiera. Ja używam &lt;a href="https://github.com/google/googletest"&gt;googletest&lt;/a&gt;. Jedynie co musiałem zrobić to usunąć testy używające OpenGL, ponieważ AppVeyor ma jakieś problemy z tymi testami, których nie udało mi się rozwiązać.&lt;/p&gt;
&lt;p&gt;&lt;img alt src="/images/ci/TestsCI.png"&gt;&lt;/p&gt;
&lt;p&gt;Aby testy się wyświetliły w odpowiedniej zakładce trzeba wyeksportować je w odpowiednie miejsce. Skrypt eksportujący dodajemy w zakładce General. &lt;/p&gt;
&lt;p&gt;&lt;img alt src="/images/ci/TestUpload.png"&gt;&lt;/p&gt;
&lt;p&gt;Teraz jeszcze krótko na temat projektów .Net Core. Jak już mówiłem pisze również toole do swojego silnika. Postanowiłem je również dodać do CI. W przypadku .Net Core jest dużo prościej niż w C/C++. Zmianami jakie należy poczynić to dodanie restorowania nugetów przed buildem.&lt;/p&gt;
&lt;p&gt;&lt;img alt src="/images/ci/CorebeforeBuild.png"&gt;&lt;/p&gt;
&lt;p&gt;Dodatkowo, jeżeli chcemy odpalić testy to również musimy je odpalić za pomocą commandline'owego narzędzia dotnet:&lt;/p&gt;
&lt;p&gt;&lt;img alt src="/images/ci/CoreTesting.png"&gt;&lt;/p&gt;
&lt;p&gt;To w sumie tyle, każdy projekt builduje mi się na commita. W przyszłości pobawię się jeszcze z tworzeniem jakiś paczek, które będzie można pobrać zainstalować i używać, ale to na razie jeszcze pieśń przyszłości. Generalnie AppVeyor jako usługa bardzo mi się podoba ze względu na łatwość i szybkość konfiguracji. A jakie wy macie doświadczenia z usługami CI?&lt;/p&gt;</content><category term="inne"></category><category term="tools"></category><category term="CI"></category><category term="appveyor"></category></entry><entry><title>Pimp your commandline</title><link href="http://localhost:8000/pimp-your-commandline.html" rel="alternate"></link><published>2016-11-06T00:00:00+01:00</published><updated>2016-11-06T00:00:00+01:00</updated><author><name>Szymon Wanot</name></author><id>tag:localhost,2016-11-06:/pimp-your-commandline.html</id><summary type="html">&lt;p&gt;Cześć, dziś chciałem nieco odejść od tematu programowania na rzecz pokazania możliwości modyfikacji narzędzi pracy programisty. Oprócz ulubionego IDE na podorędziu każdego developera powinna znajdować się konsola czy też tzw. commandline. Systemy Uniksopodobne (Linux, OSX, FreeBSD, itp) mogą poszczycić się masą dodatków do swoich terminali tak Windowsy od zawsze miały …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cześć, dziś chciałem nieco odejść od tematu programowania na rzecz pokazania możliwości modyfikacji narzędzi pracy programisty. Oprócz ulubionego IDE na podorędziu każdego developera powinna znajdować się konsola czy też tzw. commandline. Systemy Uniksopodobne (Linux, OSX, FreeBSD, itp) mogą poszczycić się masą dodatków do swoich terminali tak Windowsy od zawsze miały w na tym polu nieco gorzej. Od pewnego czasu sytuacja ta zaczęła się zmieniać za pomocą ciekawych alternatyw dla cmd.exe czy niebieskiego powershella. &lt;/p&gt;
&lt;p&gt;Pierwsza i chyba najstarszą alternatywą jest emulator basha z gita. Ja sam trochę z tego korzystałem, ale jakoś nie do końca mi ta alternatywa odpowiadała, mimo wszystko należy o niej z obowiązku wspomnieć. Po wielu bojach i próbach ucywilizowania windowsowego cmd poddałem się i obecnie korzystam z cmder’a (zbudowany na emulatorze ConEmu w tandemie z powershellem). Teminal można znaleźć pod adresem: http://cmder.net/.
Efekt po przeróbkach powinien prezentować się w taki oto sposób:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt posh" src="/images/posh.gif"&gt;&lt;/p&gt;
&lt;p&gt;Dodatkowo aby poprawić wygląd tak jak jest to pokazane powyżej korzystać z następujących dodatków powershella: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;posh-git - czyli dodatek do gita w powershell dostępny pod: &lt;a href="https://github.com/dahlbyk/posh-git"&gt;https://github.com/dahlbyk/posh-git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;oh-my-posh - czyli powerline dla powershella plus parę innych udogodnień: &lt;a href="https://github.com/JanJoris/oh-my-posh"&gt;https://github.com/JanJoris/oh-my-posh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;font - fira code: &lt;a href="https://github.com/tonsky/FiraCode"&gt;https://github.com/tonsky/FiraCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Po instalacji wszystkiego należy ustawić oh my posh jako skrypt startowy cmder’a. Aby tego dokonać należy wejść do {instalacja cmder}\config i do pliku user-profile.ps1 oddać linie:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;Import-Module&lt;/span&gt; &lt;span class="n"&gt;oh-my-posh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Jeżeli wszystko poszło ok to pozostaje tylko dostosować kolory i tyle.&lt;/p&gt;</content><category term="inne"></category><category term="tools"></category></entry></feed>