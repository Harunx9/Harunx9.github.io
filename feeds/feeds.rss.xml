<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Programming warfare</title><link>https://harunx9.github.io/</link><description></description><lastBuildDate>Sat, 24 Mar 2018 16:00:00 +0100</lastBuildDate><item><title>C# like events in C++ - second approach</title><link>https://harunx9.github.io/c-like-events-in-c-second-approach.html</link><description>&lt;p&gt;Hi Everyone ! About year ago I try to implement events for 2DXngine. Right now when I try to implement game I realize that this implementation is insufficient for my current needs. Previous events need to store binding in order to unsubscribe, use macro to create bindings and so on. This …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sat, 24 Mar 2018 16:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2018-03-24:/c-like-events-in-c-second-approach.html</guid><category>blog</category><category>.net</category><category>programming</category><category>c</category><category>cpp</category><category>c++</category><category>functional programming</category><category>events</category><category>publisher</category><category>subscriber</category></item><item><title>Functional flavor in C# 7 with pattern matching</title><link>https://harunx9.github.io/functional-flavor-in-c-7-with-pattern-matching.html</link><description>&lt;p&gt;With many great features C# 7 comes with new and shiny pattern matching. I know that this feature is less usable then in other languages, but it add new possibilities to coding. In this article I want to share with you my experiments with monads.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;I believe that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 11 Feb 2018 18:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2018-02-11:/functional-flavor-in-c-7-with-pattern-matching.html</guid><category>blog</category><category>.net</category><category>programming</category><category>c#</category><category>functional pregramming</category><category>pattern matching</category></item><item><title>Jak stać się junior developerem - Tutorial cz. 2</title><link>https://harunx9.github.io/jak-stac-sie-junior-developerem-tutorial-cz-2.html</link><description>&lt;p&gt;Cześć, pod poprzednim artykułem pokazało się kilka komentarzy, które uświadomiły mi, że to co napisałem nie jest do końca kompletne i usystematyzowane. Dziś postaram się nieco uzupełnić poprzedni wpis dodając elementy, które były treścią komentarzy. Zacznijmy standardowo od aspektów związanych bezpośrednio z pracą programisty, tak bez wchodzenia w konkretną technologię …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Thu, 30 Nov 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-11-30:/jak-stac-sie-junior-developerem-tutorial-cz-2.html</guid><category>blog</category><category>inne</category><category>it</category><category>praca</category></item><item><title>Jak stać się junior developerem - Tutorial</title><link>https://harunx9.github.io/jak-stac-sie-junior-developerem-tutorial.html</link><description>&lt;p&gt;Cześć. Ostatnio nie mam zbyt wiele czasu pisać, ale jest jeden temat na który powinienem się wypowiedzieć. Kilku moich znajomych próbuje się przekwalifikować z jakieś innej dziedziny na programistę lub dostać prace w it, więc zadają mi pytania jak to zrobić. Jestem dość specyficzną osobą, to znaczy odnalazłem pasję w …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Mon, 20 Nov 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-11-20:/jak-stac-sie-junior-developerem-tutorial.html</guid><category>blog</category><category>inne</category><category>it</category><category>praca</category></item><item><title>2DXngine tutorial - Engine overview</title><link>https://harunx9.github.io/2dxngine-tutorial-engine-overview.html</link><description>&lt;p&gt;Hi everyone. This will be my first post in English, so I believe that it will be worst. I've made decision lately about that to make some simple 2DXngine tutorial. Writeing this in English language can reach bigger audience I believe. Let's start from the beginning. 2DXngine is my project …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sat, 28 Oct 2017 16:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-10-28:/2dxngine-tutorial-engine-overview.html</guid><category>2DXngineTutorial</category><category>2DXngine</category><category>gamedev</category></item><item><title>Hello World rok później</title><link>https://harunx9.github.io/hello-world-rok-pozniej.html</link><description>&lt;p&gt;Cześć.  16 października 2016 czyli ponad rok temu temu wystartowałem z blogiem, ponieważ chciałem robić coś poza siedzeniem w piwnicy i klepaniem kolejnych linijek kodu. Zauważyłem, że dodatkowo taki blog może być świetnym miejscem na wymianę idei, czy rozwijanie swojego kodowania.
 Co udało się przez ten rok osiągnąć:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;48 wpisów …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Wed, 18 Oct 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-10-18:/hello-world-rok-pozniej.html</guid><category>blog</category><category>inne</category></item><item><title>PugiXML, czyli proste prasowanie XML w C/C++</title><link>https://harunx9.github.io/pugixml-czyli-proste-prasowanie-xml-w-cc.html</link><description>&lt;p&gt;Cześć. Jakiś czas temu stanąłem przed potrzebą wyboru jakiegoś rozwiązania do pracy z plikami XML. W C/C++ jest kilka bibliotek do obsługi XML'i:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TinyXML,&lt;/li&gt;
&lt;li&gt;RapidXML,&lt;/li&gt;
&lt;li&gt;LibXML2,&lt;/li&gt;
&lt;li&gt;BoostXML,&lt;/li&gt;
&lt;li&gt;PugiXML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jak pewnie można się domyślić po tytule, to mój wybór padł na bibliotekę &lt;a href="https://pugixml.org/"&gt;pugixml&lt;/a&gt;. Wybrałem tak dlatego, że jej Api najbardziej …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Wed, 11 Oct 2017 19:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-10-11:/pugixml-czyli-proste-prasowanie-xml-w-cc.html</guid><category>programming</category><category>Gamedev</category></item><item><title>2DXngine update wersja 0.2.x-alpha</title><link>https://harunx9.github.io/2dxngine-update-wersja-02x-alpha.html</link><description>&lt;p&gt;Cześć. Od Daj się poznać 2017 minęło kilka miesięcy, więc czas na mały update tego co w 2DXngine się dzieje. Jak widzicie nie poddałem się i nadal rozwijam framework oraz dodaje nowe funkcjonalności. Co zatem się zmieniło od ostatniego razu? Jest tego dość sporo, więc mogę coś niechcący pominąć. Ostatni …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Wed, 04 Oct 2017 08:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-10-04:/2dxngine-update-wersja-02x-alpha.html</guid><category>2DXngine</category></item><item><title>AppVeyor darmowe CI dla projektów Open Source</title><link>https://harunx9.github.io/appveynor-darmowe-ci-dla-projektow-open-source.html</link><description>&lt;p&gt;Cześć. Jakiś czas temu natchnęło mnie i postanowiłem ogarnąć coś, żeby 2DXnegine budował się na serwerze Continous Integration. Dla niezaznajomionych z tematem Continous Integration to taki twór, który po każdym commicie będzie pobierał do siebie nasze źródła, kompilował je i odpalał testy - po tym wszystkim możemy gdzieś naszą zbudowaną aplikacje …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Mon, 25 Sep 2017 07:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-09-25:/appveynor-darmowe-ci-dla-projektow-open-source.html</guid><category>inne</category><category>tools</category><category>CI</category><category>appveyor</category></item><item><title>.NET klasy internal a testy jednostkowe</title><link>https://harunx9.github.io/net-klasy-internal-a-testy-jednostkowe.html</link><description>&lt;p&gt;Cześć. Dużo się ostatnio naoglądałem i naczytałem o DDD i architekturze port-adapter i tak zacząłem rozmyślać jak to osiągnąć, choćby w kontekście tooli, które piszę do swojego silnika.&lt;/p&gt;
&lt;p&gt;Z tego co zauważyłem, to w projektach z którymi przyszło mi pracować, większość klas jest publiczna. Jest to zrozumiałe, chcemy mieć testy …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Mon, 18 Sep 2017 19:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-09-18:/net-klasy-internal-a-testy-jednostkowe.html</guid><category>blog</category><category>.net</category><category>programming</category><category>c#</category></item><item><title>.NET dev na detoksie, czyli Visual Studio 2017 bez Resharpera</title><link>https://harunx9.github.io/net-dev-na-detoksie-czyli-visual-studio-2017-bez-resharpera.html</link><description>&lt;p&gt;Cześć. Dziś będzie trochę o narzędziach pracy. Jak wiadomo przynajmniej do niedawana, jako .NET developerzy mieliśmy jedno IDE, czyli &lt;a href="https://www.visualstudio.com/pl/vs/"&gt;Visual Studio&lt;/a&gt; ewentualnie jak ktoś chciał mógł używać &lt;a href="http://www.monodevelop.com/"&gt;MonoDevelop&lt;/a&gt;. Obecnie po ostatnim otwarciu się Microsoftu na świat Open Source  pojawiało się masę edytorów wspierających C# i IntelliSense za pomocą &lt;a href="http://www.omnisharp.net/"&gt;OmniSharp&lt;/a&gt;. Dodatkowo …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sat, 09 Sep 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-09-09:/net-dev-na-detoksie-czyli-visual-studio-2017-bez-resharpera.html</guid><category>blog</category><category>.net</category><category>programming</category><category>c#</category><category>visualstudio</category><category>refactoring</category><category>resharper</category></item><item><title>Komponentowe CLI część 2. Implementacja</title><link>https://harunx9.github.io/komponentowe-cli-czesc-2-implementacja.html</link><description>&lt;p&gt;Cześć. Ostatnio przedstawiłem wam zamysł mojego modułowego systemu do tworzenia tooli CLI w .NET Core. To co będę prezentował w tym poście jest to implementacja POC, więc kod momentami jest robiony na szybko. Będę pisał o tym co myślę, że można jeszcze poprawić w dalszej części artykułu. Na początku zanim …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sat, 02 Sep 2017 16:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-09-02:/komponentowe-cli-czesc-2-implementacja.html</guid><category>blog</category><category>.net</category><category>programming</category><category>c#</category><category>.netcore</category><category>cli</category></item><item><title>Komponentowe CLI część 1. Potrzeba oraz dostępne rozwiązania</title><link>https://harunx9.github.io/komponentowe-cli-czesc-1-potrzeba-oraz-dostepne-rozwiazania.html</link><description>&lt;p&gt;Cześć. Ostatni post o automatycznej rejestracji komponentów w Autofac był jedynie wstępem do tego co chcę osiągnąć w narzędziach, które obecnie pisze. Co do samych narzędzi to chciałbym mieć takie oto rozwiązania:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Texture packer - narzędzie do pakowanie spritesheetów i animacji, które będzie rozumiał 2DXngine,&lt;/li&gt;
&lt;li&gt;Project generator - generuje podstawowy projekt 2DXngine …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 27 Aug 2017 12:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-08-27:/komponentowe-cli-czesc-1-potrzeba-oraz-dostepne-rozwiazania.html</guid><category>blog</category><category>.net</category><category>programming</category><category>c#</category><category>.netcore</category><category>cli</category></item><item><title>Automatyczna rejestracja zależności w Autofac na .NETCore</title><link>https://harunx9.github.io/automatyczna-rejestracja-zaleznosci-w-autofac-na-netcore.html</link><description>&lt;p&gt;Cześć. Dawno mnie nie było, ale ostatnio w większym stopniu skupiłem się na 2DXngine, więc czasu na pisanie postów automatycznie jest mniej. Ze względu na to, że obecnie implementuję narzędzia potrzebne do pracy z silnikiem (repo jest &lt;a href="https://github.com/Harunx9/Xngine.Tools"&gt;TU&lt;/a&gt;) chciałem nieco napisać o mechanizmach, które tam tworzę. Po pierwsze całość będzie …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 20 Aug 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-08-20:/automatyczna-rejestracja-zaleznosci-w-autofac-na-netcore.html</guid><category>blog</category><category>.net</category><category>programming</category><category>c#</category></item><item><title>Renderowanie 2D cześć 6: Tekst True Type Font</title><link>https://harunx9.github.io/renderowanie-2d-czesc-6-tekst-true-type-font.html</link><description>&lt;p&gt;Renderowanie tekstu jest nieco bardziej skomplikowane od wyświetlania prostych obrazków. Wyświetlanie tekstu możemy zrealizować na dwa sposoby:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;renderowanie SpriteFontów,&lt;/li&gt;
&lt;li&gt;renderowanie True Type Font. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pierwszy sposób polega na wygenerowaniu sobie z pliku czcionki tekstury oraz pliku opisującego układ znaków na teksturze. Potem podczas renderowania wycinamy za pomocą tych danych odpowiednie obszary …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 06 Aug 2017 13:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-08-06:/renderowanie-2d-czesc-6-tekst-true-type-font.html</guid><category>Gamedev</category><category>OpenGL</category></item><item><title>Konfiguracja aplikacji za pomocą plików ini</title><link>https://harunx9.github.io/konfiguracja-aplikacji-za-pomoca-plikow-ini.html</link><description>&lt;p&gt;Cześć. Dziś zajmiemy się konfiguracją aplikacji w C++. Temat przedstawię od strony mojego silnika 2DXngine. W przypadku C++ temat zewnętrznej konfiguracji nie jest tak oczywisty jak w przypadku C# i .NET, gdzie mamy pliki App i Web config. Taką konfiguracje w C++ możemy zapisać w plikach XML, ale jest to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Fri, 21 Jul 2017 21:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-07-21:/konfiguracja-aplikacji-za-pomoca-plikow-ini.html</guid><category>programming</category><category>Gamedev</category></item><item><title>SDL_mixer, czyli szybka implementacja audio</title><link>https://harunx9.github.io/sdl_mixer-czyli-szybka-implementacja-audio.html</link><description>&lt;p&gt;Prawdopodobnie każdy twórca gier chce, by jego gra powodowała większą immersję, dlatego też należałoby do niej dodać oprócz grafiki takżę dźwięk oraz muzykę. 
Ze względu na to, że 2DXngine używa SDL2 postanowiłem iść dalej tą drogą i do odczytywania wykorzystać plugin SDL_mixer. Jest to mała wtyczka do SDL2, która pozwala …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 09 Jul 2017 21:20:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-07-09:/sdl_mixer-czyli-szybka-implementacja-audio.html</guid><category>Gamedev</category></item><item><title>Renderowanie 2D cześć 5: Kamera</title><link>https://harunx9.github.io/renderowanie-2d-czesc-5-kamera.html</link><description>&lt;p&gt;Cześć. W poprzednich artykułach opisałem jak zaimplementowałem renderowanie 2D, dziś jeszcze jeden element dotyczący grafiki, czyli kamera 2D. Kamera jest elementem za pomocą, którego możemy manipulować viewport'em.
Sam interfejs klasy kamery jest dość prosty:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Camera&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;Camera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;viewportWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;viewportHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Camera&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;get_rotation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;_rotation …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 02 Jul 2017 14:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-07-02:/renderowanie-2d-czesc-5-kamera.html</guid><category>Gamedev</category><category>OpenGL</category></item><item><title>Renderowanie 2D część 4.2: Spritebatch</title><link>https://harunx9.github.io/renderowanie-2d-czesc-42-spritebatch.html</link><description>&lt;p&gt;Cześć. W poprzedniej części napisałem nieco o tym jak przebiega rysowanie a właściwie dokładanie elementów do narysowania. W tym artykule zajmiemy się dokładnie tym jak działa pipeline rysowania SpriteBatchem. Aby narysować jaką teksturę należy napisać taki oto kodzik:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;_device&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextureWrap&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;REPEAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextureFilter&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;POINT_FILTER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;batch …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Wed, 21 Jun 2017 19:30:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-06-21:/renderowanie-2d-czesc-42-spritebatch.html</guid><category>Gamedev</category><category>OpenGL</category></item><item><title>Renderowanie 2D część 4.1: Spritebatch</title><link>https://harunx9.github.io/renderowanie-2d-czesc-41-spritebatch.html</link><description>&lt;p&gt;W poprzednich postach opisałem składowe potrzebne do napisania właściwego renderowania, dziś zajmiemy się właśnie Spritebatchem, który będzie służył w silniku 2DXngine do renderowania 2D. Zacznijmy jak zawsze od  interfejsu klasy, którą będziemy omawiać:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;FlipEffect&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NONE_FLIP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FLIP_HORIZONTAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FLIP_VERTICAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;SortMode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NONE_SORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FRONT_TO_BACK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;BACK_TO_FRONT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SpriteBatch&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;SpriteBatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GraphicDevice&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;SpriteBatch …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 18 Jun 2017 17:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-06-18:/renderowanie-2d-czesc-41-spritebatch.html</guid><category>Gamedev</category><category>OpenGL</category></item><item><title>Renderowanie 2d część 3: Sampler State</title><link>https://harunx9.github.io/renderowanie-2d-czesc-3-sampler-state.html</link><description>&lt;p&gt;Sampler to dość nowa rzecz w OpenGL, dostępna od wersji 3.3. Jest to taki kontener, który pozwala na przechowywanie parametrów potrzeb renderowania tekstur. Jego ustawienia są wykorzystywane przez fragment shader. W poprzednich wersjach OpenGL ustawienia te trzeba było ustawiać w teksturze przez funkcje glTexParameteri(), ale w momencie kiedy mamy …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 11 Jun 2017 08:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-06-11:/renderowanie-2d-czesc-3-sampler-state.html</guid><category>Gamedev</category><category>OpenGL</category></item><item><title>DSP 2017: Podsumowanie</title><link>https://harunx9.github.io/dsp-2017-podsumowanie.html</link><description>&lt;p&gt;Cześć, wiem, że trochę już po nie w czasie zamieszczam podsumowanie konkursu Daj Się Poznać 2017, ale ważne, że jest. Po pierwsze chciałbym podziękować wszystkim odwiedzjącym i komentującym. Mam nadzieję, że również po konkursie będziecie odwiedzać mojego bloga. Ztego miejsca zapraszam do dyskusji, ponieważ tylko tak można wymienić się wiedzą …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Thu, 08 Jun 2017 19:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-06-08:/dsp-2017-podsumowanie.html</guid><category>blog</category><category>inne</category></item><item><title>Renderowanie 2D część 2: Shadery</title><link>https://harunx9.github.io/renderowanie-2d-czesc-2-shadery.html</link><description>&lt;p&gt;Shadery to programy wykonywane podczas procesu renderowania OpenGL. Nie będę tu opisywał całego pipeline, ponieważ to byłby temat na cały osobny artykuł, więc wspomnę tylko, że dla renderowania 2D istotne jest wipięcie się w fazę vertex shadera i fragment shadera. Ten pierwszy opowiada za umiejscowienie naszego spritea w przestrzeni, jego …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sat, 20 May 2017 18:50:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-05-20:/renderowanie-2d-czesc-2-shadery.html</guid><category>DSP2017</category><category>Gamedev</category><category>OpenGL</category></item><item><title>Renderowanie 2D część 1: Tekstury</title><link>https://harunx9.github.io/renderowanie-2d-czesc-1-tekstury.html</link><description>&lt;p&gt;Ostatnio udało mi się skończyć renderowanie w 2DXngine, chciałbym opisać jak działa zaimplementowane przeze mnie rozwiązanie. Zaczniemy od struktur danych, które są nam potrzebne aby działało renderowanie 2D. Jako pierwsze przyjrzymy się jak zaimplementować teksturę oraz jak ją wczytać z dysku, co nie do końca może być takie oczywiste w …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Wed, 17 May 2017 17:30:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-05-17:/renderowanie-2d-czesc-1-tekstury.html</guid><category>DSP2017</category><category>Gamedev</category><category>OpenGL</category></item><item><title>Gamedev przegląd technologii</title><link>https://harunx9.github.io/gamedev-przeglad-technologii.html</link><description>&lt;p&gt;Cześć. Dziś taki post z kategorii teoretyczno-poradnikowej. Mowa tu będzie o technologiach jakie polecam do tworzenia gier i dlaczego moim zdaniem ta a nie inna jest fajna. Traktujecie te przemyślenia nie jak prawdę objawioną, ale jako moje przemyślenia z perspektywy czasu. Od razu na początku chcę powiedzieć, że nie będzie …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Tue, 09 May 2017 20:50:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-05-09:/gamedev-przeglad-technologii.html</guid><category>DSP2017</category><category>Gamedev</category></item><item><title>2DXngine: Renderowanie 2D i inne informacje</title><link>https://harunx9.github.io/2dxngine-renderowanie-2d-i-inne-informacje.html</link><description>&lt;p&gt;Cześć wszystkim. Wiem, że ostatnio było mało postów na temat progresu silnika - no niestety stworzenie sensownego renderowania pochłonęło masę czasu na research i implementacje. Mimo tego i tak będę miał sporo refactoringu, ale o tym napiszę później. Podczas implementacji chciałem, aby mój system renderowania był wzorowany na tym co znamy …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sat, 06 May 2017 10:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-05-06:/2dxngine-renderowanie-2d-i-inne-informacje.html</guid><category>DSP2017</category><category>2DXngine</category></item><item><title>Moja Internetowa baza wiedzy</title><link>https://harunx9.github.io/moja-internetowa-baza-wiedzy.html</link><description>&lt;p&gt;Cześć. Jak pisałem w którymś z poprzednich postów, można nauczyć się programować samemu z Internetu. Podobnie jest, jeśli chodzi o rozwój programisty. Ja przez te parę lat nauki i rozwoju znalazłem kilka fajnych miejsc w Internecie lub dostosowałem odwiedzane strony tak, aby służyły mi jako baza wiedzy o programowaniu. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com"&gt;YouTube …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Wed, 26 Apr 2017 20:10:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-04-26:/moja-internetowa-baza-wiedzy.html</guid><category>DSP2017</category><category>Nauka</category></item><item><title>Ogólna architektura silnika - sztuczna inteligencja</title><link>https://harunx9.github.io/ogolna-architektura-silnika-sztuczna-inteligencja.html</link><description>&lt;p&gt;Cześć. W dzisiejszych czasach bardzo popularne są gry sieciowe, więc opierające się o interakcje z innymi graczami. Mimo to sztuczna inteligencja nawet w  nich jest potrzeba, aby tworzyć bossów czy jakieś ciekawe eventy wraz z NPC w świecie gry. W dzisiejszym artykule przyjrzymy się jak stworzyć sztuczną inteligencje na miarę …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sat, 22 Apr 2017 18:30:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-04-22:/ogolna-architektura-silnika-sztuczna-inteligencja.html</guid><category>DSP2017</category><category>Gamedev</category></item><item><title>OpenGL a Unit Testy</title><link>https://harunx9.github.io/opengl-a-unit-testy.html</link><description>&lt;p&gt;Cześć. Wiem, że powinienem w pierwszej kolejności napisać o C++ i testowaniu, ale zeszło mi na to jakieś 3 godziny, więc może ktoś skorzysta z mojej wiedzy. Chciałem napisać prosty test sprawdzający czy klasa programu Shadera działa tak jak tego oczekuję. Napisałem więc prosty test, odpaliłem go i od tego …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Mon, 17 Apr 2017 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-04-17:/opengl-a-unit-testy.html</guid><category>DSP2017</category><category>Gamedev</category><category>Tools</category></item><item><title>Tworzenie gier w pojedynkę lub małym zespole. Czy to w ogóle możliwe?</title><link>https://harunx9.github.io/tworzenie-gier-w-pojedynke-lub-malym-zespole-czy-to-w-ogole-mozliwe.html</link><description>&lt;p&gt;Cześć. W poście o alternatywnych ścieżkach rozwoju w programowaniu opowiedziałem nieco jak ja się rozwijam jako programista. Teraz chciałem opowiedzieć o implementacji takiego modelu rozwoju w prawdziwym życiu. Tworzenie gier to bardzo fajne ciekawe i mega rozwijające hobby. Oprócz programowania trzeba poznać nieco matematyki, fizyki, architektury komputera, wzorców projektowych, tworzenia …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 16 Apr 2017 14:15:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-04-16:/tworzenie-gier-w-pojedynke-lub-malym-zespole-czy-to-w-ogole-mozliwe.html</guid><category>DSP2017</category><category>Gamedev</category></item><item><title>Ogólna architektura silnika - component model</title><link>https://harunx9.github.io/ogolna-architektura-silnika-component-model.html</link><description>&lt;p&gt;Poprzedni post z tego cyklu traktował o tym jak tworzyć GameObjecty za pomocą hierarchii dziedziczenia. Jak już pisałem sposób ten staje się nieczytelny, w miarę rozwoju projektu, ale pozwala szybko wystartować. Dla większych gier GameObjecty tworzymy w nieco inny sposób używając nie dziedziczenia, a kompozycji stąd nazwa component model. W …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Tue, 11 Apr 2017 18:20:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-04-11:/ogolna-architektura-silnika-component-model.html</guid><category>DSP2017</category><category>Gamedev</category></item><item><title>2DXngine podsumowanie pierwszego miesiąca pracy</title><link>https://harunx9.github.io/2dxngine-podsumowanie-pierwszego-miesiaca-pracy.html</link><description>&lt;p&gt;Cześć, dawno nic nie pisałem na temat projektu, ale nie oznacza to, że nic w tym temacie się nie dzieje. Mam parę problemów natury filozoficznej przy podejmowaniu kilku decyzji, ale o tym może później. Zacznijmy od tego co udało się zrobić, co jest w trakcie realizacji. Z rzeczy zrealizowanych należało …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sat, 08 Apr 2017 20:40:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-04-08:/2dxngine-podsumowanie-pierwszego-miesiaca-pracy.html</guid><category>DSP2017</category><category>2DXngine</category></item><item><title>Alternatywne ścieżki rozwoju programisty</title><link>https://harunx9.github.io/alternatywne-sciezki-rozwoju-programisty.html</link><description>&lt;p&gt;Cześć. Dziś opowiem nieco o mojej przygodzie z tworzeniem gier oraz o tym dlaczego taką a nie inną obrałem drogę swojego rozwoju programistycznego. &lt;/p&gt;
&lt;p&gt;Na początku chciałem napisać o tym dlaczego mnie to zainteresowało. Po pierwsze sam chce się rozwijać, ale jako, że przez 8 godzin dziennie jestem web developerem  - programowanie …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Mon, 03 Apr 2017 17:40:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-04-03:/alternatywne-sciezki-rozwoju-programisty.html</guid><category>DSP2017</category><category>Nauka</category></item><item><title>Eventy jak w C# w C++</title><link>https://harunx9.github.io/eventy-jak-w-c-w-c.html</link><description>&lt;p&gt;Cześć.
Niestety w tym tygodniu nie miałem czasu za dużo popracować nad silnikiem. Co prawda pisze system scen, ale mam to tak rozgrzebane, że nie jestem w stanie tego podsumować. Mimo tego udało mi się zrobić jedną fajną rzecz, którą chciałem się z wami podzielić. Implementując silnik pomyślałem, że będę …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Fri, 31 Mar 2017 21:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-03-31:/eventy-jak-w-c-w-c.html</guid><category>DSP2017</category><category>Gamedev</category><category>Tools</category></item><item><title>Własny TypeInfo w C++</title><link>https://harunx9.github.io/wlasny-typeinfo-w-c.html</link><description>&lt;p&gt;Cześć, dziś chciałem pokazać jak zrobiłem system informacji o typach obiektów w silniku 2DXngine, który powstaje w ramach konkursu "Daj się poznać". Taki feature był mi porzebny do wysukiwania po typie komponentów z GameObjectu. Nie chciałem używać standardowego  TypeId, ponieważ mądrzejsi ode mnie mówią, że jest to powolne, i że …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Mon, 27 Mar 2017 19:10:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-03-27:/wlasny-typeinfo-w-c.html</guid><category>DSP2017</category><category>Gamedev</category><category>C++</category></item><item><title>2DXngine: aktualizacja po trzecim tygodniu</title><link>https://harunx9.github.io/2dxngine-aktualizacja-po-trzecim-tygodniu.html</link><description>&lt;p&gt;Witam W tym tygodniu udało mi się po pierwsze popracować trochę więcej. Jak policzę tak to mniej więcej to wyszło około 24 godziny. Nie było też już większych problemów implementacyjnych.&lt;/p&gt;
&lt;p&gt;W ciągu tego tygodnia udało mi się zrobić do końca GameObject - właściwie całość jest  już działająca. Testy również w większości …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sat, 25 Mar 2017 10:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-03-25:/2dxngine-aktualizacja-po-trzecim-tygodniu.html</guid><category>DSP2017</category><category>2DXngine</category></item><item><title>Ogólna architektura silnika - system Encji/GameObject'ów</title><link>https://harunx9.github.io/ogolna-architektura-silnika-system-encjigameobjectow.html</link><description>&lt;p&gt;Ostatni post tego cyklu był o zarządzaniu scenami, dziś postaram się nieco napisać o tym co powinno być na scenie, aby gra posiadała jakiś gameplay. Mowa tu będzie o Aktorach, Encjach lub GameObjetach w zależności od biblioteki/engine'u nazwa może się różnić, ale to ciągle to samo. Takim elementem może …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Tue, 21 Mar 2017 18:20:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-03-21:/ogolna-architektura-silnika-system-encjigameobjectow.html</guid><category>DSP2017</category><category>Gamedev</category></item><item><title>2DXngine: aktualizacja po drugim tygodniu</title><link>https://harunx9.github.io/2dxngine-aktualizacja-po-drugim-tygodniu.html</link><description>&lt;p&gt;Cześć. Mija drugi tydzień konkursu "Daj się poznać " pora więc na podsumowanie tygodnia prac nad projektem 2DXngine. Niestety z braku czasu w tym tygodniu prace nieco spowolniły, ale mimo to udało się skończyć mi prace nad systemem typów, ale po kolei. W tym tygodniu znowu średnio szło mi ze śledzeniem …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Fri, 17 Mar 2017 21:40:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-03-17:/2dxngine-aktualizacja-po-drugim-tygodniu.html</guid><category>DSP2017</category><category>2DXngine</category></item><item><title>Narzędzia przydatne w tworzeniu gier</title><link>https://harunx9.github.io/narzedzia-przydatne-w-tworzeniu-gier.html</link><description>&lt;p&gt;Jako, że słowo się rzekło, teraz więcej postów o tematyce związanej z szeroko pojętym gamedevem. Dziś chciałbym przybliżyć wam kilka fajnych narzędzi, które można wykorzystać tworząc własny silnik do gry.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mapeditor.org/"&gt;Tiled&lt;/a&gt; - Darmowy&lt;/p&gt;
&lt;p&gt;Ze wszystkich programów z Tiled korzystam chyba najwięcej. Jest to prosty i intuicyjny edytor poziomów do gier.  Mimo …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Wed, 15 Mar 2017 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-03-15:/narzedzia-przydatne-w-tworzeniu-gier.html</guid><category>DSP2017</category><category>Gamedev</category><category>Tools</category></item><item><title>2DXngine: aktualizacja po pierwszym tygodniu</title><link>https://harunx9.github.io/2dxngine-aktualizacja-po-pierwszym-tygodniu.html</link><description>&lt;p&gt;Cześć, jako, że mija pierwszy tydzień developmentu należało by wrzucić jakiś status update dotyczący projektu konkursowego. Jak wiadomo początki są trudne. Instalacja bibliotek ciągła się w nieskończoność, ale w końcu się udało. Ogólna struktura projektu w Visual Studio wygląda następująco:
&lt;img alt="2DXngine struktura projektu" src="/images/engine_project.png"&gt; 
Tak jak napisałem nie mam jakiś alternatywnych build systemów, a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Fri, 10 Mar 2017 19:40:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-03-10:/2dxngine-aktualizacja-po-pierwszym-tygodniu.html</guid><category>DSP2017</category><category>2DXngine</category></item><item><title>Ogólna architektura silnika - system scen</title><link>https://harunx9.github.io/ogolna-architektura-silnika-system-scen.html</link><description>&lt;p&gt;Dziś  trochę więcej opowiem na temat wysokopoziomowych wzorców stosowanych w grach komputerowych. Opisana poprzednio w artykule pętla gry jest bardzo nisko poziomowym elementem, mimo to jest niezbędna do implementacji dalszych podsystemów gry. System scen jest moim zdaniem drugim elementem, który dobrze jest zaimplementować, aby grę można było w łatwy sposób …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Wed, 08 Mar 2017 17:10:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-03-08:/ogolna-architektura-silnika-system-scen.html</guid><category>DSP2017</category><category>Gamedev</category></item><item><title>Ogólna architektura silnika - pętla gry</title><link>https://harunx9.github.io/ogolna-architektura-silnika-petla-gry.html</link><description>&lt;p&gt;Elementem, który posiada każdy silnik do gier jest pętla gry. W skrócie jest to element, który cyklicznie wykonuje całą logikę naszej gry. Wszystkie gry posiadają pewne stałe elementy, które muszą być wykonane, aby całość systemu działała.&lt;/p&gt;
&lt;p&gt;W największym uproszczeniu gra co klatkę powinna:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sprawdzić sygnały z urządzeń wejścia,&lt;/li&gt;
&lt;li&gt;na podstawie …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sat, 04 Mar 2017 18:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-03-04:/ogolna-architektura-silnika-petla-gry.html</guid><category>DSP2017</category><category>Gamedev</category></item><item><title>2DXngine: start projektu</title><link>https://harunx9.github.io/2dxngine-start-projektu.html</link><description>&lt;p&gt;Cześć,
Jako, że "Daj Się Poznać 2017" dziś wystartowało, to ja również chciałbym wystartować z projektem konkursowmym.
Po długim namyśle zdecydowałem się na napisanie silnika w C++. Zanim przejdę do pokazania co zrobiłem, chciałem po krótce  określić ramy projektu.  Napisanie kompletnego silnika z edytorem w czasie 3 miesięcy z moim …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Wed, 01 Mar 2017 16:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-03-01:/2dxngine-start-projektu.html</guid><category>DSP2017</category><category>2DXngine</category></item><item><title>Ogólna architektura silnika - start</title><link>https://harunx9.github.io/ogolna-architektura-silnika-start.html</link><description>&lt;p&gt;Jak już pisałem wcześniej chciałbym tego bloga poprowadzić bardziej w stronę tematów związanych z tworzeniem gier komputerowych. Zacznę od ogólnej architektury, czyli tego jak ja bym wydział to jak zaimplementować silnik. Doświadczenia może nie mam dużego, ale już parę mniejszych gierek napisałem z lepszym lub gorszym skutkiem, więc wyciągnołem jakieś …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Mon, 27 Feb 2017 01:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-02-27:/ogolna-architektura-silnika-start.html</guid><category>DSP2017</category><category>Gamedev</category></item><item><title>Co dalej</title><link>https://harunx9.github.io/co-dalej.html</link><description>&lt;p&gt;Cześć, 
Wiem, że dawno nie było żadnych postów. Musiałem nieco przemyśleć to czym chce się dalej na blogu zajmować.
Z moich przemyśleń wynikają następujące decyzje. 
Po pierwsze chciałbym tworzyć wpisy w znacznej części poświęcone tworzeniu gier komputerowych.
Co do Akka.NET i C++ to postaram się ją w miarę możliwości …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sat, 18 Feb 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2017-02-18:/co-dalej.html</guid><category>blog</category><category>inne</category></item><item><title>Akka.NET: Instalacja i obowiązkowy “Hello world”</title><link>https://harunx9.github.io/akkanet-instalacja-i-obowiazkowy-hello-world.html</link><description>&lt;p&gt;Jakiś czas temu pisałem na temat aktor model z perspektywy pracy z nim. Osoby, które spotykają się z tym tematem po raz pierwszy odsyłam do poprzedniego posta.
W tej serii mam zamiar przedstawić Wam Akka.NET, czy port aktor modelu prosto z JVM. Zabawę zaczniemy od prostego “Hello world”. W …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Tue, 06 Dec 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2016-12-06:/akkanet-instalacja-i-obowiazkowy-hello-world.html</guid><category>blog</category><category>.net</category><category>programming</category><category>c#</category><category>actror model</category><category>Akka.NET</category><category>Akka</category></item><item><title>C/C++: Instrukcje warunkowe if i switch</title><link>https://harunx9.github.io/cc-instrukcje-warunkowe-if-i-switch.html</link><description>&lt;p&gt;Zdaję sobie sprawę z tego,że ostatni post był nieco przydługi i zostało w nim przekazane więcej elementów, dlatego zdecydowałem się na nieco mniejsze objętościowo posty (jeżeli jakiś temat będzie nieco dłuższy to podzielę go na kilka postów, zamiast starać się upchać wszystko razem). 
W trzeciej już części artykułów  o …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Tue, 29 Nov 2016 01:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2016-11-29:/cc-instrukcje-warunkowe-if-i-switch.html</guid><category>blog</category><category>tutorial</category><category>programming</category></item><item><title>O actor model z perspektywy paru miesięcy pracy</title><link>https://harunx9.github.io/o-actor-model-z-perspektywy-paru-miesiecy-pracy.html</link><description>&lt;p&gt;Cześć. Jako, że od pewnego czasu actor model staje się coraz bardziej popularny w technologii .NET chciałem nieco więcej opowiedzieć o pracy z takim rozwiązaniem. 
W pierwszym poście chciałem wprowadzić nieco moich przemyśleń i teorii bez kodu. 
Gdyby zdarzyło się tak, iż, jeszcze nie wiesz co to jest actor model …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 13 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2016-11-13:/o-actor-model-z-perspektywy-paru-miesiecy-pracy.html</guid><category>blog</category><category>.net</category><category>programming</category><category>c#</category><category>actror model</category><category>Akka.NET</category><category>Akka</category></item><item><title>Pimp your commandline</title><link>https://harunx9.github.io/pimp-your-commandline.html</link><description>&lt;p&gt;Cześć, dziś chciałem nieco odejść od tematu programowania na rzecz pokazania możliwości modyfikacji narzędzi pracy programisty. Oprócz ulubionego IDE na podorędziu każdego developera powinna znajdować się konsola czy też tzw. commandline. Systemy Uniksopodobne (Linux, OSX, FreeBSD, itp) mogą poszczycić się masą dodatków do swoich terminali tak Windowsy od zawsze miały …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 06 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2016-11-06:/pimp-your-commandline.html</guid><category>inne</category><category>tools</category></item><item><title>C/C++: Typy danych, zmienne i operatory</title><link>https://harunx9.github.io/cc-typy-danych-zmienne-i-operatory.html</link><description>&lt;p&gt;Witam ponownie, jeżeli to czytasz to znaczy, że wróciłeś po więcej C++. W tym wpisie postaram się przedstawić typy danych, operatory i koncepcję zmiennej. Zaczniemy od tego jakie możemy mieć zmienne w C++. 
Typów podstawowych jest sporo, więc postaram się omówić najpopularniejsze i najczęściej używane:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int min: -2147483648 max: 2147483647 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Mon, 31 Oct 2016 01:00:00 +0100</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2016-10-31:/cc-typy-danych-zmienne-i-operatory.html</guid><category>blog</category><category>tutorial</category><category>programming</category></item><item><title>Czy wiesz co robi za Ciebie kompilator?: Funkcje lambda</title><link>https://harunx9.github.io/czy-wiesz-co-robi-za-ciebie-kompilator-funkcje-lambda.html</link><description>&lt;p&gt;Cześć, kiedyś ludzie mówili mi, że nie należy wkładać palców między drzwi, bo może zaboleć. Niestety jakoś tak wychodzi, że jestem ciekawy jak
działa to z czym pracuję, więc zacząłem się nieco przyglądać jak wygląda .NET pod maską i nawet mi się spodobało.
Na pierwszy ogień pójdą dziś funkcje lambda …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Mon, 24 Oct 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2016-10-24:/czy-wiesz-co-robi-za-ciebie-kompilator-funkcje-lambda.html</guid><category>blog</category><category>.net</category><category>programming</category><category>c#</category></item><item><title>C/C++: Konfiguracja środowiska</title><link>https://harunx9.github.io/cc-konfiguracja-srodowiska.html</link><description>&lt;p&gt;No i stało się, pierwszy techniczny post na blogu. Na samym początku muszę się Wam do czegoś przyznać, a mianowicie od mojego ostatniego razu z C/C++ minęły około 2 lata. Wracam do tego języka pisząc niewielkich rozmiarów silnik do gier. Doszedłem do wniosku, że fajnym pomysłem będzie szybkie przejście …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 16 Oct 2016 01:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2016-10-16:/cc-konfiguracja-srodowiska.html</guid><category>blog</category><category>tutorial</category><category>programming</category></item><item><title>3.2.1 start</title><link>https://harunx9.github.io/321-start.html</link><description>&lt;p&gt;Cześć, &lt;/p&gt;
&lt;p&gt;Po dość długim czasie zastanawiania się czy inicjatywa w postaci kolejnego bloga technologicznego ma sens, postanowiłem jednak wystartować. &lt;/p&gt;
&lt;p&gt;W miarę moich możliwości czasowych, postaram się jak najczęściej dodawać posty.
Tematy, które będę poruszał w niniejszym blogu w dużej mierze będą dotyczyć technologii .NET/C# oraz C/C++ w kontekście …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Wanot</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:harunx9.github.io,2016-10-16:/321-start.html</guid><category>blog</category><category>inne</category></item></channel></rss>